CREATE TABLE app_users (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	username varchar(50) NOT NULL,
	email varchar(50) NOT NULL,
	"password" varchar(255) NULL,
	is_enabled bool NULL,
	last_time_password_updated timestamp NULL,
	is_credentials_non_expired bool NULL,
	is_account_non_expired bool NULL,
	is_account_non_locked bool NULL,
	is_deleted bool NULL,
	is_not_allowed_update bool DEFAULT false NULL,
	is_system bool DEFAULT false NULL,
	created_at timestamp DEFAULT now() NULL,
	updated_at timestamp DEFAULT now() NULL,
	deleted_at timestamp NULL,
	CONSTRAINT app_users_pkey PRIMARY KEY (id)
);
CREATE UNIQUE INDEX users_email_key ON app_users USING btree (lower((email)::text)) WHERE (is_deleted = false);
CREATE UNIQUE INDEX users_username_key ON app_users USING btree (lower((username)::text)) WHERE (is_deleted = false);

CREATE TABLE user_info(
	id int8 NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	firstname varchar(200),
	lastname varchar(200),
	dob date,
	app_user_id int8,
	FOREIGN KEY (app_user_id) REFERENCES app_users(id)
);

CREATE TABLE "roles" (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	"name" varchar(255) NOT NULL,
	description varchar(255) NULL,
	is_disabled bool NULL,
	is_not_allowed_update bool DEFAULT false NULL,
	is_system bool DEFAULT false NULL,
	CONSTRAINT role_name_key UNIQUE (name),
	CONSTRAINT role_pkey PRIMARY KEY (id)
);

CREATE TABLE "permissions" (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	code varchar(255) NOT NULL,
	description varchar(255) NULL,
	entity_name varchar(255) NULL,
	action_name varchar(255) NULL,
	"group" varchar(255) NULL,
	CONSTRAINT permission_pkey PRIMARY KEY (id)
);
CREATE UNIQUE INDEX permission_code_key ON permissions USING btree (lower((code)::text));

CREATE TABLE app_user_roles (
	user_id int8 NOT NULL,
	role_id int8 NOT NULL,
	CONSTRAINT app_user_roles_pkey PRIMARY KEY (user_id, role_id)
);

ALTER TABLE app_user_roles ADD CONSTRAINT app_user_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES "roles"(id);
ALTER TABLE app_user_roles ADD CONSTRAINT app_user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES app_users(id);

CREATE TABLE role_permissions (
	role_id int4 NOT NULL,
	permission_id int4 NOT NULL,
	CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id)
);

ALTER TABLE role_permissions ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES "permissions"(id);
ALTER TABLE role_permissions ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id) REFERENCES "roles"(id);

CREATE TABLE audit_trail (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	entity varchar(100) NULL,
	"action" varchar(100) NULL,
	resource_id int8 NULL,
	ip text NULL,
	status varchar(100) NULL,
	http_method varchar(50) NULL,
	request_url text NULL,
	request_params text NULL,
	request_body jsonb NULL,
	user_id int8 NULL,
	username varchar(200) NULL,
	new_value jsonb NULL,
	old_value jsonb NULL,
	error_message text NULL,
	created_at timestamp DEFAULT now() NULL,
	trace_id varchar(100) NULL,
	CONSTRAINT audit_trail_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_audit_trail_trace_id ON audit_trail USING btree (trace_id);
CREATE INDEX idx_audit_trails_action ON audit_trail USING btree (action);
CREATE INDEX idx_audit_trails_created_at ON audit_trail USING btree (created_at DESC);
CREATE INDEX idx_audit_trails_entity ON audit_trail USING btree (entity);
CREATE INDEX idx_audit_trails_resource_id_entity ON audit_trail USING btree (resource_id, entity);
CREATE INDEX idx_audit_trails_status ON audit_trail USING btree (status);
CREATE INDEX idx_audit_trails_username ON audit_trail USING btree (username);

CREATE TABLE failed_login (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	username varchar(200) NULL,
	ip varchar(150) NULL,
	failed_at timestamp NULL,
	error_msg text NULL,
	is_still_in_attempt bool NULL,
	CONSTRAINT failed_login_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_failed_login_failed_date ON public.failed_login USING btree (failed_at) WHERE (is_still_in_attempt = true);
CREATE INDEX idx_failed_login_username ON public.failed_login USING btree (username) WHERE (is_still_in_attempt = true);

INSERT INTO app_users(username, email, "password", is_enabled, last_time_password_updated, is_credentials_non_expired, is_account_non_expired, is_account_non_locked, is_deleted, is_not_allowed_update, is_system, created_at, updated_at, deleted_at)
VALUES('admin@emal.com','admin@emal.com', '$2a$12$AqVFsR/5UU/S0x0G8tW1EecYOzWOolo0uq4SpmIqNNj6nLINzmzBe', true, NOW(), true, true, true, false, true, false, NOW(), NOW(), NULL);

INSERT INTO user_info(firstname, lastname, app_user_id)
VALUES ('System', 'Admin', (SELECT id FROM app_users WHERE username = 'admin@emal.com'));

INSERT INTO "roles"("name", description, is_disabled, is_not_allowed_update, is_system)
VALUES('Super User', 'This role for manage the whole system', false, true, false);


INSERT INTO "permissions"(code, description, entity_name, action_name, "group")
VALUES('SPECIAL:ALL_FUNCTIONS', 'SPECIAL:ALL_FUNCTIONS - Permission for all actions', 'SPECIAL', 'ALL_FUNCTIONS', 'SPECIAL'),
	  ('SPECIAL:ALL_READ_FUNCTIONS', 'SPECIAL:ALL__READ_FUNCTIONS - Permission for all read actions only', 'SPECIAL', 'ALL_READ_FUNCTIONS', 'SPECIAL'),
      ('SPECIAL:ALL_WRITE_FUNCTIONS', 'SPECIAL:ALL_FUNCTIONS - Permission for all write actions only', 'SPECIAL', 'ALL_WRITE_FUNCTIONS', 'SPECIAL');

INSERT INTO app_user_roles(user_id, role_id)
VALUES ((SELECT id FROM app_users WHERE username = 'admin@emal.com'), (SELECT id FROM roles WHERE "name" = 'Super User'));

INSERT INTO role_permissions(role_id, permission_id)
VALUES ((SELECT id FROM roles WHERE "name" = 'Super User'), (SELECT id FROM permissions WHERE "code" = 'SPECIAL:ALL_FUNCTIONS')),
	   ((SELECT id FROM roles WHERE "name" = 'Super User'), (SELECT id FROM permissions WHERE "code" = 'SPECIAL:ALL_READ_FUNCTIONS')),
	   ((SELECT id FROM roles WHERE "name" = 'Super User'), (SELECT id FROM permissions WHERE "code" = 'SPECIAL:ALL_WRITE_FUNCTIONS'));