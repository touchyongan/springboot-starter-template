spring.application.name=springboot-starter-template

# The alias mapped to the certificate
server.ssl.key-alias=server-key
server.ssl.enabled=${ENABLED_SSL:false}
server.port=${SERVER_PORT:8443}
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=${SERVER_KEY_STORE_PATH:classpath:serverkey/server-keystore.p12}
# The password used to generate the certificate
server.ssl.key-store-password=${SERVER_KEY_STORE_PASSWORD:password}

# Config database url
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/sample}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:root}

# Config flyway migration
spring.flyway.enabled=true
spring.flyway.group=true
spring.flyway.locations=classpath:/db/migration
spring.flyway.out-of-order=true
spring.flyway.validate-on-migrate=false
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=1

# log config
logging.level.org.jooq.Constants=OFF

# Config mask data for security log
log.security.headers=authorization,x-api-key
log.security.requestBodyFields=password,currentPassword,newPassword,confirmPassword,token,refreshToken,mfaToken,code,recoveryCode

# Config JWT Key
auth.jwt.secret_key=${JWT_SECRET:wLkD8Pq3XyV7zR9tB2mN6cF1gH4jK8pQsT5vWxYzA0bU3eS7rM}
auth.jwt.expiration=${JWT_EXPIRATION:3600000}
auth.jwt.refresh_expiration=${JWT_REFRESH_EXPIRATION:86400000}

# Cors config
security.cors.allow_origins=${ALLOW_ORIGINS:*}
security.cors.allow_methods=${ALLOW_METHODS:*}
security.cors.allow_headers=${ALLOW_HEADERS:*}

# OAuth2 Client Config
## Sample config with Spring Authorization Server
#spring.security.oauth2.client.registration.login-client.provider=spring
#spring.security.oauth2.client.registration.login-client.client-id=${SPRING_CLIENT_ID:login-client}
#spring.security.oauth2.client.registration.login-client.client-secret=${SPRING_CLIENT_SECRET:openid-connect}
#spring.security.oauth2.client.registration.login-client.client-authentication-method=client_secret_basic
#spring.security.oauth2.client.registration.login-client.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.login-client.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.login-client.scope=openid,profile
#spring.security.oauth2.client.registration.login-client.client-name=Spring
#spring.security.oauth2.client.registration.okta.client-id=${OKTA_CLIENT_ID:your-app-client-id}
#spring.security.oauth2.client.registration.okta.client-secret=${OKTA_CLIENT_SECRET:your-app-client-id}

## Config custom provider
#spring.security.oauth2.client.provider.spring.authorization-uri=http://localhost:9000/oauth2/authorize
#spring.security.oauth2.client.provider.spring.token-uri=http://localhost:9000/oauth2/token
#spring.security.oauth2.client.provider.spring.jwk-set-uri=http://localhost:9000/oauth2/jwks
#spring.security.oauth2.client.provider.okta.authorization-uri=https://dev-example123.okta.com/oauth2/v1/authorize
#spring.security.oauth2.client.provider.okta.token-uri=https://dev-example123.okta.com/oauth2/v1/token
#spring.security.oauth2.client.provider.okta.user-info-uri=https://dev-example123.okta.com/oauth2/v1/userinfo
#spring.security.oauth2.client.provider.okta.jwk-set-uri=https://dev-example123.okta.com/oauth2/v1/keys

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-app-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-app-client-secret}
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:your-app-client-id}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:your-app-client-secret}
spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID:your-app-client-id}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET:your-app-client-secret}

## Config UI redirect URL to exchange token
### UI needs to exchange jwt token using GET with endpoint /oauth2/exchange?token=ey...
oauth2.client.ui-redirect-url=${UI_OAUTH2_REDIRECT_URI:http://localhost:8081/auth/oauth2/callback}